import java.awt.image.DataBufferDouble;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.TreeMap;

//class Node {
//    Node left;
//    Node right;
//    int data;
//    
//    Node(int data) {
//        this.data = data;
//        left = null;
//        right = null;
//    }
//}

public class LowestCommonAncestor implements Comparable<Node> {

	/*
	 * class Node int data; Node left; Node right;
	 */
	static List<Node> list1 = new LinkedList<Node>();
	static List<Node> list2 = new LinkedList<Node>();
	Comparable<Node> comparable = new Comparable<Node>() {
		
		@Override
		public int compareTo(Node o) {
			// TODO Auto-generated method stub
			return 0;
		}
	};
	static TreeMap<Node, Integer> map = new TreeMap<Node, Integer>();

	public static Node lca(Node root, int v1, int v2) {
//        int vv = 0;
////        int v =0;
////        list1.add(root);
////        list2.add(root);
//        Node right = null;
//        Node left = null;
		Node tempNode = root;
//
//         if(v1>v2) {
//        	if (root.left!=null) {
//				
//			
//        	 left = getLeft(root.left, v2);
//        	while (root.left!=null && root.left.data!=v2) {
//				root = root.left;
//				  left = getLeft(root, v2);
//        	}
//        	
//        	if(root.right!=null) {
//        	root = tempNode;
//       	 	right = getRight(root.right, v1);
//        	while (root.right!=null && root.right.data != v1) {
//				root = root.right;
//				 right = getRight(root, v1);
//				
//			}
//        	}
//         }
//         }
//        else if(v1<v2) {
//        	if (root.left!=null) {
//				
//			
//        	 left = getLeft(root, v1);
//        	while (root.left!=null && left.data!=v1) {
//        		if(left.data == v1) {
//        			return left;
//        		}
//        	root = root.left;
//        	left = getLeft(root, v1);
//        	
//        	
//        	}
//
//    		root = tempNode;
//        	if(root.right!=null) {
//       	 	right = getRight(root, v2);
//        	while (root.right!=null && right.data != v2) {
//        		if(right.data == v2) {
//        			return right;
//        		}
//				root = root.right;
//				 right = getRight(root, v2);
//				
//			}
//        	
//        	}
//        	
//        
//	
//        	else {
//				root= tempNode;
//			}
//        	}
//        
//        if(right!=null || left!=null) {
		int i = 0;
//				int x= 0;
		getLeft(root, v1);
		getRight(root, v1);
		for (Entry<Node, Integer> entry : map.entrySet()) {
			if ((Integer.valueOf(entry.getValue())).equals(Integer.valueOf(v1))
					|| Integer.valueOf(entry.getValue()).equals(Integer.valueOf(v2))&& i< list1.size() && i< list2.size()) {
				
				if (!list1.isEmpty() && list1.get(i).data == v1 || list2.get(i).data == v1) {
					i++;
					return tempNode = list1.get(i - 1);
				} else if (!list2.isEmpty() && list2.get(i).data == v2 || list1.get(i).data == v2) {
					i++;

					return tempNode = list2.get(i - 1);
				}
			}
			i++;
		}

//				if(!list1.isEmpty()) {
//					
//						return list1.get(i);
//					
//						
//				}
//				else if(!list2.isEmpty()) {
//					return list2.get(i);
//				}
//				

//		}
//		}
//        }

		return tempNode;
	}

//        int i = 0;
//       for (int j = 0; j < list1.size() && j <list2.size() ; j++) {
//    	   if(list1.get(i).equals(list2.get(i))){
//              root =  list1.get(i);
//	}
//            if(list1.get(i).equals(list2.get(i))){
//                list1.get(i);
//                
//            }
//        }

	// Write y

	public static void getRight(Node root, int v1) {
		while (root.right != null) {
			map.put(root, v1);
			root = root.right;
			getLeft(root, v1);
			list1.add(root);

		}
//    	int i =0;
//    	if(root!=null) {
//        while(root.right!=null) {
//            list1.add(root);
//            if(root.data == v1 ) {
//            	return list1.get(i);	
//            }
//            root = root.right;
//            
//            list1.add(root);
//            
//        }
//        i++;
//    	}

	}

	public static void getLeft(Node root, int v1) {
		while (root.left != null) {
			map.put(root, v1);
			root = root.left;
			getRight(root, v1);
			list2.add(root);

		}
//    	int i =0;
//    	if (root!=null) {
//			
//		
//        while(root.left!=null) {
//        	list2.add(root);
//        	if (root.data == v1) {
//        		return list2.get(i);
//				
//			}
//            
//            root=root.left;
//           
//            
//            list2.add(root);
//            i++;
//        }
//    	}
//        return root;

	}

	public static Node insert(Node root, int data) {
		if (root == null) {
			return new Node(data);
		} else {
			Node cur;
			if (data <= root.data) {
				cur = insert(root.left, data);
				root.left = cur;
			} else {
				cur = insert(root.right, data);
				root.right = cur;
			}
			return root;
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int t = scan.nextInt();
		Node root = null;
		while (t-- > 0) {
			int data = scan.nextInt();
			root = insert(root, data);
		}
		int v1 = scan.nextInt();
		int v2 = scan.nextInt();
		scan.close();
		Node ans = lca(root, v1, v2);
		System.out.println(ans.data);
	}

	
}