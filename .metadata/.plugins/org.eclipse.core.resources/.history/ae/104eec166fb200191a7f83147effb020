import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class RunningMedian {
	static Comparator<Integer> maxHeapComparator = new Comparator<Integer>() {

		@Override
		public int compare(Integer arg0, Integer arg1) {
			if (arg0 < arg1) {
				return -1;
			}
			if (arg1 < arg0) {
				return 1;
			}
			return 0;
		}
	};

	public static int MaxHeap(int[] array) {

		PriorityQueue<Integer> queue = new PriorityQueue<Integer>(maxHeapComparator);
		for (int i = 0; i < array.length; i++) {
			queue.add(array[i]);
		}
		return queue.peek();

	}

	public static int MinimumHeap(int[] array) {
		PriorityQueue<Integer> queue = new PriorityQueue<Integer>();
		for (int i = 0; i < array.length; i++) {
			queue.add(array[i]);
		}
		return queue.peek();

	}

	public static void getMedian(int[] array) {
		if (isOdd(array)) {
			System.out.println(MaxHeap(array));
		} else {
			System.out.println(MinimumHeap(array));
		}
	}

	public static boolean isOdd(int[] array) {
		int count = 0;
		for (int i = 0; i < array.length; i++) {
			count++;
		}
		if (count % 2 == 0) {
			return false;
		}
		return true;

	}

	private static final Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) {
		int n = scanner.nextInt();
		scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

		int[] a = new int[n];

		for (int i = 0; i < n; i++) {
			int aItem = scanner.nextInt();
			scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
			a[i] = aItem;
			if (isOdd(a)) {
				int[] array = new int[i];
				array = Arrays.copyOfRange(array, 0, i+1);
				getMedian(array);
			}

			else {

				int[] array = new int[(1];
				array = Arrays.copyOfRange(a, 0,i);
				getMedian(array);
			}
			
		}
		
		getMedian(a);
		scanner.close();
		getMedian(a);
	}
}
