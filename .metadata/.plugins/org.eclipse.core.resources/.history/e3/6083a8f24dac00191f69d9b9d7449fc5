import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.Map.Entry;
import java.util.regex.*;

import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;

public class EqualStacks {

    /*
     * Complete the equalStacks function below.
     */
    static int equalStacks(int[] h1, int[] h2, int[] h3) {

		Stack<Integer> stack1 = new Stack<Integer>();
		Stack<Integer> stack2 = new Stack<Integer>();
		Stack<Integer> stack3 = new Stack<Integer>();
		Arrays.sort(h1);
		Arrays.sort(h2);
		Arrays.sort(h3);
		int n1 = 0;
		int n2 = 0;
		int n3 =0;
       for (int i = 0; i < h1.length; i++) {
    	   n1 = h1[i];
    	   for(int j = n1; j>0; j--) {
    		   stack1.push(1);
    	   }
	}
       
       for (int i = 0; i < h2.length; i++) {
    	   n2 = h2[i];
    	   for(int j = n2; j>0; j--) {
    		   stack2.push(1);
    	   }
   	}
       for (int i = 0; i < h3.length; i++) {
    	   n3 = h3[i];
    	   for(int j = n3; j>0; j--) {
    		   stack3.push(1);
    	   }
      	}
       
    
       int min = Math.min(stack1.size(),Math.min(stack2.size(), stack3.size()));
       int max = Math.max(stack1.size(),Math.max(stack2.size(), stack3.size()));
       int maxMin = Math.abs(min-max);
       while(max>0) {
    	   max--;
    	   if(max==)
       }
		
	
//       for (int i = 0; i <min; i++) {
//    	   if(stack1.size()==fina) {
//    		   break;
//    	   }
//    	   else {
//    		   stack1.pop();
//    	   }  if(stack2.size()==fina) {
//    		   break;
//    	   }
//    	   else {
//    		   stack2.pop();
//    	   }  if(stack3.size()==fina) {
//    		   continue;
//    	   }
//    	   else {
//    		   stack3.pop();
//    	   }
//       }
//		while(!stack1.isEmpty()) {
//			n1 += stack1.pop();
//		}
	
          
	
       return  fina;
    }
//    	Map<Integer, Integer> map = new HashMap<Integer, Integer>();
//    	for (int i = 0; i < h1.length; i++) {
//    		map.put(h1.length, h1[i]);
//			
//		}
//    	for (int i = 0; i < h2.length; i++) {
//    		map.put(h2.length, h2[i]);
//			
//		}
//    	for (int i = 0; i < h3.length; i++) {
//    		map.put(h3.length, h3[i]);
//			
//		}
//    	int max =0;
//    	int min = Integer.MAX_VALUE;
//    	for (Entry<Integer, Integer> entry : map.entrySet()) {
//    	
//    		if(max< entry.getValue()) {
//    			max = entry.getValue();
//    			
//    		}
//    		else if (min > entry.getValue()) {
//    			min = entry.getValue();
//    		}
//    		
//    	} 
//    	for (Entry<Integer, Integer> entry : map.entrySet()) {
//        	
//    		if(max==entry.getValue()) {
//    			map.remove(entry.getKey());
//    			
//    		}
//    		
//    		
//    	} 
			
		
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] n1N2N3 = scanner.nextLine().split(" ");

        int n1 = Integer.parseInt(n1N2N3[0].trim());

        int n2 = Integer.parseInt(n1N2N3[1].trim());

        int n3 = Integer.parseInt(n1N2N3[2].trim());

        int[] h1 = new int[n1];

        String[] h1Items = scanner.nextLine().split(" ");

        for (int h1Itr = 0; h1Itr < n1; h1Itr++) {
            int h1Item = Integer.parseInt(h1Items[h1Itr].trim());
            h1[h1Itr] = h1Item;
        }

        int[] h2 = new int[n2];

        String[] h2Items = scanner.nextLine().split(" ");

        for (int h2Itr = 0; h2Itr < n2; h2Itr++) {
            int h2Item = Integer.parseInt(h2Items[h2Itr].trim());
            h2[h2Itr] = h2Item;
        }

        int[] h3 = new int[n3];

        String[] h3Items = scanner.nextLine().split(" ");

        for (int h3Itr = 0; h3Itr < n3; h3Itr++) {
            int h3Item = Integer.parseInt(h3Items[h3Itr].trim());
            h3[h3Itr] = h3Item;
        }

        int result = equalStacks(h1, h2, h3);
System.out.println(result);
//        bufferedWriter.write(String.valueOf(result));
//        bufferedWriter.newLine();

//        bufferedWriter.close();
    }
}
