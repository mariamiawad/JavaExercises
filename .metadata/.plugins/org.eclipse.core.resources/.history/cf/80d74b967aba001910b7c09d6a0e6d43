import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Kangroo {

	// Complete the kangaroo function below.
	static String kangaroo(int x1, int v1, int x2, int v2) {
		
		if (Math.min(x1*1.0, v1)/Math.max(x1, v1) == Math.min(x2*1.0, v2)/Math.max(x2, v2) )
			return "YES";
		else
			return "NO";
	}

	private static int GCD(int p, int q) {
		if (q == 0) {
			return p;
		}
		return GCD(q, p % q);
	}
	 public static int lcm(int a, int b) {
		  if (a >= 0 && b >= 0) {
		    int gcd = lcm(-a, -b);
		    return (a * b) / gcd;   // lcm(a,b) * gcd(a,b) == |a*b|
		  }
		  // here we simulate euclid's gcd()
		  a = -a;
		  b = -b;
		  if (b == 0)
		    return a;
		  else
		    return lcm(-b, -(a%b)); // neg -> simulate gcd()
		}

	private static final Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) throws IOException {
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

		String[] x1V1X2V2 = scanner.nextLine().split(" ");

		int x1 = Integer.parseInt(x1V1X2V2[0]);

		int v1 = Integer.parseInt(x1V1X2V2[1]);

		int x2 = Integer.parseInt(x1V1X2V2[2]);

		int v2 = Integer.parseInt(x1V1X2V2[3]);

		String result = kangaroo(x1, v1, x2, v2);
		System.out.println(result);
//        bufferedWriter.write(result);
//        bufferedWriter.newLine();

//        bufferedWriter.close();

		scanner.close();
	}
}
