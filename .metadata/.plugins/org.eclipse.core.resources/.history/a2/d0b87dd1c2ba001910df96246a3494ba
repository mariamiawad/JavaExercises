import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.*;
import java.util.regex.*;

public class AnagramsString {

    // Complete the sherlockAndAnagrams function below.
    static int sherlockAndAnagrams(String s) {
    	Map<Integer, Integer> map1 = new HashMap<Integer, Integer>();
    	Map<String, Map<Integer, Integer>> map =new HashMap<String,Map<Integer,Integer>>();
    	char[] a;
    	
    	for (int i = 1; i <s.length()-1; i++) {
			if(!map.containsKey(s.charAt(i)+"")) {
				
				map.put(s.charAt(i)+"", map1.put(i, 1));
			}
			else {
				map.put(s.charAt(i)+"", map1.put(i, 2)));
			}
		}
    	int n = 0;
    	for (Entry<String, Integer> entry : map.entrySet()) {
    		
			if(entry.getValue()==2) {
				n = n+2;
			}
		}
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = sherlockAndAnagrams(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
