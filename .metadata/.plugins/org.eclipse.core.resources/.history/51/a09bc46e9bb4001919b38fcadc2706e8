import java.awt.image.DataBufferDouble;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.TreeMap;

//class Node {
//    Node left;
//    Node right;
//    int data;
//    
//    Node(int data) {
//        this.data = data;
//        left = null;
//        right = null;
//    }
//}

public class LowestCommonAncestor {

	/*
	 * class Node int data; Node left; Node right;
	 */

	public static Node lca(Node root, int v1, int v2) {
		
		Node tempNode = root;
		while(tempNode!=null) {
		if(v1>v2&& tempNode.data <= v1) {
			tempNode = getRight(tempNode, v1);
			if (tempNode.data==v1) {
				return tempNode;
				
			}
			tempNode = tempNode.right;
		}
		else if (v2> v1 && tempNode.data <= v2) {
			tempNode = getRight(tempNode, v2);
			if (tempNode.data==v2) {
				return tempNode;
				
			}
			tempNode = tempNode.right;
		
		}
		 if(v1>v2&& tempNode.data >= v1) {
			tempNode = getLeft(tempNode, v1);
			if(tempNode.data == v1) {
				return tempNode;
			}
			tempNode = tempNode.left;
		}
		else if(v2>v1&& tempNode.data >= v2) {
			tempNode = getLeft(tempNode, v2);
			if (tempNode.data == v2) {
				return tempNode;
				
			}
			tempNode = tempNode.left;
		}
		}
	return tempNode;
	}
	
	
	

	public static Node getLeft(Node root, int v1) {
		Node temNode = root;
		while (temNode.left != null) {
			if (temNode.data == v1) {
				return temNode;
			}
			temNode = temNode.left;
		}
		return temNode;
	}

	public static Node getRight(Node root, int v1) {
		Node temNode = root;
		while (temNode.right != null) {
			if (temNode.right.data == v1) {
				return temNode;
			}
			temNode = temNode.right;
		}
		return temNode;
	}

	public static Node insert(Node root, int data) {
		if (root == null) {
			return new Node(data);
		} else {
			Node cur;
			if (data <= root.data) {
				cur = insert(root.left, data);
				root.left = cur;
			} else {
				cur = insert(root.right, data);
				root.right = cur;
			}
			return root;
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int t = scan.nextInt();
		Node root = null;
		while (t-- > 0) {
			int data = scan.nextInt();
			root = insert(root, data);
		}
		int v1 = scan.nextInt();
		int v2 = scan.nextInt();
		scan.close();
		Node ans = lca(root, v1, v2);
		System.out.println(ans.data);
	}

}