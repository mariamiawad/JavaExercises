import java.io.IOException;
import java.io.ObjectOutputStream.PutField;
import java.time.chrono.MinguoChronology;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.print.attribute.Size2DSyntax;
import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;

import org.omg.CosNaming.NamingContextExtPackage.AddressHelper;

import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class ClosestNumbers {

    // Complete the closestNumbers function below.
    static int[] closestNumbers(int[] arr) {
    	ArrayList<Integer> arrayList = new ArrayList<Integer>();
    	Map<Integer, Integer> m = new HashMap<Integer, Integer>();
    	Map<Map<Integer, Integer>, Integer> maps = new LinkedHashMap(m);
    	int min = Math.abs(arr[0]-arr[1]);
    	Arrays.sort(arr);
    	int temp = 0;
    	int [] finall = new int[arr.length+1];
    	int[] tempArray = new int [arr.length];
    	int count = 0;
    	for (int i = 0; i < arr.length; i++) {
    		for (int j = 0; j < arr.length-i-1 ; j++) {
    			
    			if(min >= Math.abs(arr[j]-arr[j+1])) {
    				
    				min =Math.abs(arr[j]-arr[j+1]);
    				temp = arr[j+1];
    				arr[j+1]=arr[j];
    				arr[j]= temp;
    				tempArray[arr.length-i-2] = arr[j];
    				tempArray[arr.length-i-1] = arr[j+1];
    				if(!(arrayList.contains(tempArray[arrayList.size()-i]) &&!arrayList.contains(tempArray[arrayList.size()-i+1]))&& min == Math.abs(tempArray[arrayList.size()-i]-tempArray[arrayList.size()+1-i])){
    	    			arrayList.add(tempArray[arr.length-i-1]);
    	    			arrayList.add(arr.length-i-2);
    	    	
    	        	}
    			}
    			
    		}
    		
			}
    	
    	
    		
    		
        		
    		
    	
			
    
    		
    		
			
    	

			finall = new int [arrayList.size()];
    	for (int i =0; i <finall.length; i++) {
    		finall[i]=arrayList.get(i);
		}
    	return finall;
    	
    }
		
//    	for (int i = 1; i < finall.length; i++) {
//			if(finall[i-1]-finall[i]== min) {
//				 {
//				arrayList.add(finall[i]);
//				arrayList.add(finall[i-1]);
//				}
//			}
//		}
//    	int[] temp = new int [arrayList.size()-1];
//    	for (int i = 0; i < temp.length; i++) {
//    		temp[i]= arrayList.get(i);
//			
//		}
//    	return temp;
//    }
//    public static int getMin(int [] arr) {
//    	int min = Integer.MAX_VALUE;
//    	for (int i = 1; i < arr.length-1; i++) {
//    		for (int j = i+1; j < arr.length; j++) {
//    			if(arr[i-1]-arr[i]< arr[i]-arr[i+1]) {
//    				if(min > arr[i]-arr[i+1])
//    					min =arr[i-1]-arr[i] ;
//    				
//			}
//			
//			}
//		}
//    	return min;
//	}

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr[i] = arrItem;
        }

        int[] result = closestNumbers(arr);

        for (int i = 0; i < result.length; i++) {
        	System.out.println(result[i]);
//            bufferedWriter.write(String.valueOf(result[i]));

//            if (i != result.length - 1) {
//                bufferedWriter.write(" ");
            }
//        }

//        bufferedWriter.newLine();

//        bufferedWriter.close();

        scanner.close();
    }
}
