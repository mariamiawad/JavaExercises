import java.util.*;
import java.io.*;

class Node {
	Node left;
	Node right;
	int data;

	Node(int data) {
		this.data = data;
		left = null;
		right = null;
	}
}

class PreOrderTarversal {

	private static Node currentNode;

	/*
	 * you only have to complete the function given below. Node is defined as
	 * 
	 * class Node { int data; Node left; Node right; }
	 * 
	 */

	public static void preOrder(Node root) {

		int tempNode;

		Node currentNode = root;
		int data = 0;
		while (currentNode != null) {
			
			while (currentNode.left != null || currentNode.right!=null) {
				data = currentNode.data;
				if (currentNode.left != null) {
					data = currentNode.data;
					if (currentNode.data > currentNode.left.data) {
						tempNode = currentNode.data;
						currentNode.data = currentNode.left.data;
						currentNode.left.data = tempNode;
						data = currentNode.data;
					}

				}
				
			
				
				if (currentNode.right != null) {
					data = currentNode.data;
					
					if (currentNode.data > currentNode.right.data) {
						tempNode = currentNode.data;
						currentNode.data = currentNode.right.data;
						currentNode.right.data = tempNode;
						data = currentNode.data;
					}

					
				}
			

			if (currentNode.left != null && currentNode.right != null) {
				if (currentNode.left.data > currentNode.data) {
					preOrder(currentNode.left);
				}
					if (currentNode.right.data > currentNode.data) {
						preOrder(currentNode.right);
					
				}
			
			else if (currentNode.left != null) {
				currentNode.data = currentNode.left.data;
			} else if(currentNode.right!=null) {
				currentNode.data = currentNode.right.data;
			}
			}
			
			else if(currentNode.left != null) {
				currentNode = currentNode.left;
			}
			else if (currentNode.right!= null) {
				currentNode = currentNode.right;
			}
			System.out.println(data);
			}
//            preOrder(currentNode);

		}
	}

//        else {
//        	currentNode.left = null;
//        	currentNode.right = null;
//        }

//        System.out.println(currentNode.data);
//        }

	public static Node insert(Node root, int data) {
		if (root == null) {
			return new Node(data);
		} else {
			Node cur;
			if (data <= root.data) {
				cur = insert(root.left, data);
				root.left = cur;
			} else {
				cur = insert(root.right, data);
				root.right = cur;
			}
//			System.out.println(root.data);
			return root;
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int t = scan.nextInt();
		Node root = null;
		while (t-- > 0) {
			int data = scan.nextInt();
			root = insert(root, data);
		}
		scan.close();
		preOrder(root);
	}
}