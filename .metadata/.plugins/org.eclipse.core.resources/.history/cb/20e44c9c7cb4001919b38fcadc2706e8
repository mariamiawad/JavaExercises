import java.awt.image.DataBufferDouble;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.TreeMap;

//class Node {
//    Node left;
//    Node right;
//    int data;
//    
//    Node(int data) {
//        this.data = data;
//        left = null;
//        right = null;
//    }
//}

public class LowestCommonAncestor {

	/*
	 * class Node int data; Node left; Node right;
	 */

	public static Node lca(Node root, int v1, int v2) {
		Node tempNode = root;
		if (root.data > v1) {
			while (tempNode.right != null) {

				if (tempNode.right.data == v1) {
					return tempNode;
				}
				tempNode = tempNode.right;

			}
		} else if (root.data <= v1) {
			while (tempNode.left != null) {
				if (tempNode.left.data == v1) {
					return tempNode;
				}
				tempNode = tempNode.left;
			}
		}

		return tempNode;

	}

	public static Node insert(Node root, int data) {
		if (root == null) {
			return new Node(data);
		} else {
			Node cur;
			if (data <= root.data) {
				cur = insert(root.left, data);
				root.left = cur;
			} else {
				cur = insert(root.right, data);
				root.right = cur;
			}
			return root;
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int t = scan.nextInt();
		Node root = null;
		while (t-- > 0) {
			int data = scan.nextInt();
			root = insert(root, data);
		}
		int v1 = scan.nextInt();
		int v2 = scan.nextInt();
		scan.close();
		Node ans = lca(root, v1, v2);
		System.out.println(ans.data);
	}

}