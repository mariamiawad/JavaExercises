import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.Map.Entry;
import java.util.regex.*;

import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;

public class EqualStacks {

	/*
	 * Complete the equalStacks function below.
	 */
	static int equalStacks(int[] h1, int[] h2, int[] h3) {

//		Stack<Integer> stack1 = new Stack<Integer>();
//		Stack<Integer> stack2 = new Stack<Integer>();
//		Stack<Integer> stack3 = new Stack<Integer>();
//		Stack<Integer> tempStack = new Stack<Integer>();
//		
//		int min1 = Integer.MAX_VALUE;
//		int min2 = Integer.MAX_VALUE;
//		int min3 =Integer.MAX_VALUE;
//		int sum1 = 0;
//		int sum2 = 0;
//		int sum3 = 0;
//		int max =0;
//		int minSum = 0;
//		
//		for (int i = 0; i < h1.length; i++) {
//			stack1.push(h1[i]);
//		}
//		for (int i = 0; i < h2.length; i++) {
//			stack2.push(h2[i]);
//		}
//		for (int i = 0; i < h3.length; i++) {
//			stack3.push(h3[i]);
//		}
//	    /*--------------------------------------------------------------------------------*/
//		minSum  = getStack(stack1, stack2, stack3);
//		for (int j = 0; j < Math.min(Math.min(stack1.size(),stack2.size()), stack3.size()); j++) {
//			sum1 =0;
//			sum2 = 0;
//			sum3 =0;
//			for (int i = 1; i <stack1.size(); i++)
//
//			{
//				if ((stack1.get(i) +stack1.get(i-1)) > minSum  ) {
//					stack1.pop();
//				}
//
//			}
//			for (int i = 1; i < stack2.size(); i++)
//
//			{
//				if ((stack2.get(i) +stack2.get(i-1)) > minSum ) {
//					stack2.pop();
//				}
//
//			}
//			
//			for (int i = 1; i < stack3.size(); i++)
//
//			{
//				if ((stack3.get(i) +stack3.get(i-1)) > minSum  ) {
//					stack3.pop();
//				}
//
//			}
//			if (minSum > getStack(stack1, stack2, stack3)) {
//				minSum = getStack(stack1, stack2, stack3);
//				
//			} 
//			
//		}
//			return minSum;
//    }
//    /*--------------------------------------------------------------------------------*/
//

//		
//
//	
//          
//    /*--------------------------------------------------------------------------------*/
//
//    public static int getStack(Stack<Integer> stack1, Stack< Integer> stack2, Stack<Integer> stack3) {
//    	int sum1 = 0;
//		int sum2 = 0;
//		int sum3 = 0;
//		int minSum = 0;
//		int max = getMax(stack1, stack2, stack3);
//		Stack<Integer>tempStack =  new Stack<Integer>();
//		while (!stack1.isEmpty()) {
//			int temp = stack1.peek();
//			tempStack.push(temp);
//			sum1 +=temp;
//
//			stack1.pop();
//		}
//		while (!tempStack.isEmpty()) {
//			stack1.push(tempStack.pop());
//		}
//		while (!stack2.isEmpty()) {
//			int temp = stack2.peek();
//			tempStack.push(temp);
//			sum2 +=temp;
//			stack2.pop();
//		}
//		while (!tempStack.isEmpty()) {
//			stack2.push(tempStack.pop());
//		}
//		while (!stack3.isEmpty()) {
//			int temp = stack3.peek();
//			tempStack.push(temp);
//			sum3 += temp;
//
//			stack3.pop();
//		}
//		while (!tempStack.isEmpty()) {
//			
//			stack3.push(tempStack.pop());
//		}
//		minSum = Math.min(Math.min(sum1, sum2), sum3);
//		if(minSum == sum1 && minSum >= max)
//			return getMinimum(stack1, stack2);
//		else if(minSum == sum2 && minSum >= max)
//			return getMinimum(stack2, stack3);
//		else  if(minSum == sum3 && minSum >= max)
//			return getMinimum(stack1, stack3);
//		else 
//			return 0;
//		
//		
//	}

//			
		Map<Integer, Integer> map1 = new HashMap<Integer, Integer>();
		Map<Integer, Integer> map2 = new HashMap<Integer, Integer>();
		Map<Integer, Integer> map3 = new HashMap<Integer, Integer>();
		int sum1 = 0;
		int sum2 = 0;
		int sum3 = 0;
		int end1 = 0;
		int end2 =0;
		int end3 = 0;
		int sum =0;
		for (int i = 0; i < h1.length; i++) {
			sum1 += h1[i];
			end1 = h1[i];
			map1.put(i, sum1);

		}
		for (int i = 0; i < h2.length; i++) {
			sum2 += h2[i];
			end2 = h2[i];
			map2.put(i, h2[i]);

		}
		for (int i = 0; i < h3.length; i++) {
			sum3 += h3[i];
			end3 = h3[i];
			map3.put(i, h3[i]);

		}
		int maxSize = Math.max(Math.max(map1.size(), map2.size()), map3.size());
		int minSize = Math.min(Math.min(map1.size(), map2.size()), map3.size());
		int size1=map1.size();
		int size2 = map2.size();
		int size3 = map3.size();
		for (int i = 0; i < maxSize && i <=minSize; i++) {
			if (sum1 == sum2 ) {
				map3.remove(map3.size()-1);
				continue;
				
			}
			else {
				sum3= map3.get(map3.size()-1)
				map3.remove(map3.size()-1);
				
			}
			if (sum2 == sum3) {
				map1.remove(map1.size()-1);
				continue;
				
			}
			else
			{
				map1.remove(map1.size()-1);
				sum1= map1.get(map1.size()-1);
			}
			if(sum1 == sum3) {
				map2.remove(map2.size()-1);
				continue;
				
			}
			else {
				sum2= map2.get(map2.size()-1);
				map2.remove(map2.size()-1);
			}
			if (sum1 == sum2 && sum2 == sum3 && sum1 == sum3) {
				sum = sum1;
				break;
			}
			{
				
				
			}
		}
		return sum;
		

	}

	public static int getMax(Stack<Integer> stack1, Stack<Integer> stack2, Stack<Integer> stack3) {

		int max1 = 0;
		int max2 = 0;
		int max3 = 0;
		int max = 0;
		Stack<Integer> tempStack = new Stack<Integer>();
		while (!stack1.isEmpty()) {
			int temp = stack1.peek();
			tempStack.push(temp);
			if (max1 < temp) {
				max1 = temp;
			}
			stack1.pop();
		}
		while (!tempStack.isEmpty()) {
			stack1.push(tempStack.pop());
		}
		while (!stack2.isEmpty()) {
			int temp = stack2.peek();
			tempStack.push(temp);
			if (max2 < temp) {
				max2 = temp;
			}
			stack2.pop();
		}
		while (!tempStack.isEmpty()) {

			stack2.push(tempStack.pop());
		}

		while (!stack3.isEmpty()) {
			int temp = stack3.peek();
			tempStack.push(temp);
			if (max3 < temp) {
				max3 = temp;
			}
			stack3.pop();
		}
		while (!tempStack.isEmpty()) {

			stack3.push(tempStack.pop());
		}
		max = Math.max(max1, Math.max(max2, max3));
		return max;
	}

	public static int getMinimum(Stack<Integer> stack1, Stack<Integer> stack2) {
		Stack<Integer> tempStack = new Stack<Integer>();
		int sum1 = 0;
		int sum2 = 0;
		int minSum = 0;
		while (!stack1.isEmpty()) {
			int temp = stack1.peek();
			tempStack.push(temp);
			sum1 += temp;
			stack1.pop();
		}
		while (!tempStack.isEmpty()) {
			stack1.push(tempStack.pop());
		}
		while (!stack2.isEmpty()) {
			int temp = stack2.peek();
			tempStack.push(temp);
			sum2 += temp;
			stack2.pop();
		}
		while (!tempStack.isEmpty()) {

			stack2.push(tempStack.pop());
		}
		minSum = Math.min(sum1, sum2);
		return minSum;

	}

	private static final Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) throws IOException {
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

		String[] n1N2N3 = scanner.nextLine().split(" ");

		int n1 = Integer.parseInt(n1N2N3[0].trim());

		int n2 = Integer.parseInt(n1N2N3[1].trim());

		int n3 = Integer.parseInt(n1N2N3[2].trim());

		int[] h1 = new int[n1];

		String[] h1Items = scanner.nextLine().split(" ");

		for (int h1Itr = 0; h1Itr < n1; h1Itr++) {
			int h1Item = Integer.parseInt(h1Items[h1Itr].trim());
			h1[h1Itr] = h1Item;
		}

		int[] h2 = new int[n2];

		String[] h2Items = scanner.nextLine().split(" ");

		for (int h2Itr = 0; h2Itr < n2; h2Itr++) {
			int h2Item = Integer.parseInt(h2Items[h2Itr].trim());
			h2[h2Itr] = h2Item;
		}

		int[] h3 = new int[n3];

		String[] h3Items = scanner.nextLine().split(" ");

		for (int h3Itr = 0; h3Itr < n3; h3Itr++) {
			int h3Item = Integer.parseInt(h3Items[h3Itr].trim());
			h3[h3Itr] = h3Item;
		}

		int result = equalStacks(h1, h2, h3);
		System.out.println(result);
//        bufferedWriter.write(String.valueOf(result));
//        bufferedWriter.newLine();

//        bufferedWriter.close();
	}
}
