import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'shop' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. INTEGER k
     *  3. STRING_ARRAY centers
     *  4. 2D_INTEGER_ARRAY roads
     */

    public static int shop(int n, int k, List<String> centers, List<List<Integer>> roads) {
    	Map<Integer, Integer> mapOfFish = new HashMap<Integer, Integer>();
    	int numberOfFishType = 0;
    	int numberOfType = 0;
    	for (String s : centers) {
			numberOfFishType = Integer.parseInt(s.substring(0,1));
			numberOfType = Integer.parseInt(s.substring(1,2));
			mapOfFish.put(numberOfType, numberOfFishType);
			
			
		}
    	Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		map.put(roads.get(0).get(1), 0);
		List<Integer> list = new LinkedList<Integer>();
		for (Entry<List<Integer>, Integer> road : map.entrySet()) {
			list.add(road.getValue());
		}
    	for (int i = 1; i < n -1; i++) {
    		int min= Integer.MAX_VALUE;
    		for (int j = 0; j < roads.size(); j++) {
    			if(map.containsKey(roads.get(i).get(2))) {
    				if(list.get(i))
    			}
    		}
		}
    	Map<List<Integer>, Integer> mapOfRoadsMap = new HashMap<List<Integer>, Integer>();
    	mapOfRoadsMap.put(roads.get(0), roads.get(0).get(0));
		
    }

}
public class SychronousShopping {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        int k = Integer.parseInt(firstMultipleInput[2]);

        List<String> centers = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<List<Integer>> roads = new ArrayList<>();

        IntStream.range(0, m).forEach(i -> {
            try {
                roads.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int res = Result.shop(n, k, centers, roads);

        bufferedWriter.write(String.valueOf(res));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
